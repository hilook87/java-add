封装
|
实现封装的关键在于绝对不能让类中的方法直接地访问其他类的实例域；
程序仅通过对象的方法与对象的数据进行交互；

对于学习OOP的初学者来说常常会感觉无从下手；答案是：首先从设计类开始，然后再往每个类中添加方法。
识别类的简单规则是在分析问题的过程中寻找名词，而方法对应着动词；
当然所谓“找名字与动词”原则只是一种经验，在创建类的时候，哪些名词和动词是重要的完全取决于个人的开发经验；

对象与对象变量；
|
要想使用对象，就必须首先构造对象，并指定其初始状态。然后，对对象应用方法；
在java中，使用构造器构造新实例；——》构造器是一种特殊的方法，用来构造并初始化对象；
通常，希望构造的对象可以多次使用，因此，需要将对象存放在一个变量中；——》Date birthday = new Date();
一定要认识到：一个对象变量并没有实际包含一个对象，而仅仅引用一个对象；

更改器方法与访问器方法；

构造器
|
构造器与其他的方法有一个重要的不同。
构造器总是伴随着new操作符的执行被调用，而不能对一个已经存在的对象调用构造器来达到重新设置实例域的目的；

隐式参数与显式参数；
|
方法
||
方法用于操作对象以及存取它们的实例域；
方法中的第一个参数称为隐式参数，是出现在方法名前的类对象；——》关键字this表示隐式参数；

封装的优点
|
private LocalDate hireDay;
public LocalDate getHireDay(){
  return hireDay;
}
|
这些都是典型的访问器方法。由于它们只返回实例域值，因此又称为域访问器；
|
有些时候，需要获得或设置实例域的值：
一个私有的数据域；一个公有的域访问器方法；一个公有的域更改器方法；
|
注意：不要编写返回引用可变对象的访问器方法；
如果需要返回一个可变对象的引用，应该首先对它进行克隆(clone)；对象clone是指存放在另一个位置上的对象副本；
|
class Employee{
  ...
  public Date getHireDay(){
    return (Date)hireDay.clone();
  }
}


基于类的访问权限
|
class Employee{
  ...
  public boolean equals(Employee other){
    return name.equals(other.name);
  }
}
|
Employee类的方法可以访问Employee类的任何一个对象的私有域；

final实例域
|
可以将Employee类中的name域声明为final,因为在对象构建之后，这个值不会再被修改，即没有setName方法；
|
private final String name;














